// Copyright (C) 2024 Tianzhenxiong
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

package csyscall

import (
	"bytes"
	"ebpf_exporter/event"
	"ebpf_exporter/util"
	"encoding/binary"
	"errors"
	"log"
	"time"

	"github.com/cilium/ebpf"
	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	"golang.org/x/sys/unix"
)

//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -target amd64 -type syscall_event -type syscallcntkey bpf ../../kern/syscall.c -- -I../../kern/headers
const TICKER = 10

func InitSyscall(stopper <-chan struct{}, eventCh chan<- event.IEvent) {
	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %v", err)
	}
	defer objs.Close()

	tp_enter, err := link.AttachTracing(link.TracingOptions{
		Program:    objs.SysEnter,
		AttachType: ebpf.AttachTraceRawTp,
	})
	if err != nil {
		log.Fatalf("attaching raw tracepoint: %v", err)
	}
	defer tp_enter.Close()

	tp_exit, err := link.AttachTracing(link.TracingOptions{
		Program:    objs.SysExit,
		AttachType: ebpf.AttachTraceRawTp,
	})
	if err != nil {
		log.Fatalf("attaching raw tracepoint: %v", err)
	}
	defer tp_exit.Close()

	rd, err := ringbuf.NewReader(objs.SyscallRb)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rd.Close()

	log.Println("Waiting for tcp events..")

	// Read from the ringbuf
	go func() {
		// bpfEvent is generated by bpf2go.
		var bpfevent bpfSyscallEvent
		for {
			record, err := rd.Read()
			if err != nil {
				if errors.Is(err, ringbuf.ErrClosed) {
					log.Println("Received signal, exiting..")
					return
				}
				log.Printf("reading from reader: %s", err)
				continue
			}
			// Parse the ringbuf event entry into a bpfEvent structure.
			if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &bpfevent); err != nil {
				log.Printf("parsing ringbuf event: %s", err)
				continue
			}

			// 打印 bpfEvent 结构体的内容
			syscallEvent := event.Syscall_event{
				Type:          "Syscall_event",
				Timestamp:     bpfevent.Timestamp,
				Flag:          bpfevent.Flag,
				Pid:           bpfevent.Pid,
				Comm:          unix.ByteSliceToString(bpfevent.Comm[:]),
				Syscall:       bpfevent.SyscallId,
				Ret:           bpfevent.Ret,
				Cid:           unix.ByteSliceToString(bpfevent.Cid[:]),
				ContainerName: util.GetContainerName(unix.ByteSliceToString(bpfevent.Cid[:])),
				Info:          unix.ByteSliceToString(bpfevent.Info[:]),
			}
			eventCh <- syscallEvent
		}
	}()
	// Read from the array
	go func() {
		ticker := time.NewTicker(TICKER * time.Second)
		defer ticker.Stop()
		for range ticker.C {
			var (
				key   bpfSyscallcntkey
				value uint64
				keys  []bpfSyscallcntkey
			)
			iner := objs.SyscallCnt.Iterate()
			for iner.Next(&key, &value) {
				eventCh <- event.Syscall_event{
					Type:          "Syscall_event",
					Timestamp:     uint64(time.Now().Unix()),
					Flag:          2,
					Pid:           key.Pid,
					Comm:          unix.ByteSliceToString(key.Comm[:]),
					Syscall:       key.SyscallId,
					Ret:           int64(value),
					Cid:           unix.ByteSliceToString(key.Cid[:]),
					ContainerName: util.GetContainerName(unix.ByteSliceToString(key.Cid[:])),
				}
				keys = append(keys, key)
			}
			for _, key := range keys {
				objs.SyscallCnt.Delete(&key)
			}
		}
	}()

	<-stopper
	log.Println("Stopping syscall")
}
