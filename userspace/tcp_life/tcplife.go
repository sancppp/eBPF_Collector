package tcplife

import (
	"bytes"
	"ebpf_exporter/event"
	"encoding/binary"
	"errors"
	"log"
	"time"

	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	"golang.org/x/sys/unix"
)

//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -target amd64 -type tcp_event bpf ../../kern/tcplife.c -- -I../../kern/headers

func InitTcpLife(stopper <-chan struct{}, eventCh chan<- event.IEvent) {
	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %v", err)
	}
	defer objs.Close()

	kp1, err := link.Kprobe("tcp_sendmsg", objs.KprobeTcpSendmsg, nil)
	if err != nil {
		log.Fatalf("opening kropbe: %s", err)
	}
	defer kp1.Close()
	kp2, err := link.Kprobe("tcp_cleanup_rbuf", objs.KprobeTcpCleanupRbuf, nil)
	if err != nil {
		log.Fatalf("opening kropbe: %s", err)
	}
	defer kp2.Close()

	go func() {
		rd, err := ringbuf.NewReader(objs.EventsTcpRb)
		if err != nil {
			log.Fatalf("opening ringbuf reader: %s", err)
		}
		defer rd.Close()
		log.Println("Waiting for tcp events..")
		// bpfEvent is generated by bpf2go.
		var bpfevent bpfTcpEvent
		for {
			record, err := rd.Read()
			if err != nil {
				if errors.Is(err, ringbuf.ErrClosed) {
					log.Println("Received signal, exiting..")
					return
				}
				log.Printf("reading from reader: %s", err)
				continue
			}
			// Parse the ringbuf event entry into a bpfEvent structure.
			if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &bpfevent); err != nil {
				log.Printf("parsing ringbuf event: %s", err)
				continue
			}
			// 打印 bpfEvent 结构体的内容
			tcpevent := event.Tcp_event{
				Timestamp: time.Now().Unix(),
				Flag:      bpfevent.Flag,
				Pid:       bpfevent.Pid,
				Daddr:     bpfevent.Daddr,
				Dport:     bpfevent.Dport,
				Saddr:     bpfevent.Saddr,
				Sport:     bpfevent.Sport,
				Len:       bpfevent.Len,
				Comm:      unix.ByteSliceToString(bpfevent.Comm[:]),
			}
			eventCh <- tcpevent
		}
	}()
	<-stopper
}
