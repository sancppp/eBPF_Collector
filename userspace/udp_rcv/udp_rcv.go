package udprcv

import (
	"bytes"
	"ebpf_exporter/event"
	"encoding/binary"
	"errors"
	"log"
	"time"

	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	"golang.org/x/sys/unix"
)

//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -target amd64 -type Udp_event bpf ../../kern/udp_rcv.c -- -I../../kern/headers

func InitUdpRcv(stopper <-chan struct{}, eventCh chan<- event.IEvent) {
	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %v", err)
	}
	defer objs.Close()

	kpSendmsg, err := link.Kprobe("udp_sendmsg", objs.KprobeUdpSendmsg, nil)
	if err != nil {
		log.Fatalf("opening tracepoint: %s", err)
	}
	defer kpSendmsg.Close()

	kpRecvmsg, err := link.Kprobe("udp_recvmsg", objs.KprobeUdpRecvmsg, nil)
	if err != nil {
		log.Fatalf("opening tracepoint: %s", err)
	}
	defer kpRecvmsg.Close()

	// Open a ringbuf reader from userspace RINGBUF map described in the
	// eBPF C program.
	rd, err := ringbuf.NewReader(objs.EventsUdprcvRb)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rd.Close()

	// Close the reader when the process receives a signal, which will exit
	// the read loop.
	go func() {
		<-stopper

		if err := rd.Close(); err != nil {
			log.Fatalf("closing ringbuf reader: %s", err)
		}
	}()

	log.Println("Waiting for udp_sendmsg events..")

	// bpfEvent is generated by bpf2go.
	var bpfevent bpfUdpEvent
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				log.Println("Received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}

		// Parse the ringbuf event entry into a bpfEvent structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &bpfevent); err != nil {
			log.Printf("parsing ringbuf event: %s", err)
			continue
		}
		eventCh <- event.Udp_event{
			Timestamp: time.Now().Unix(),
			Flag:      bpfevent.Flag,
			Pid:       bpfevent.Pid,
			Daddr:     bpfevent.Daddr,
			Dport:     bpfevent.Dport,
			Saddr:     bpfevent.Saddr,
			Sport:     bpfevent.Sport,
			Len:       bpfevent.Len,
			Comm:      unix.ByteSliceToString(bpfevent.Comm[:]),
		}
	}

}
