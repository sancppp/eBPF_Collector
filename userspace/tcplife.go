package userspace

import (
	"bytes"
	"ebpf_exporter/event"
	"encoding/binary"
	"errors"
	"log"

	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	"golang.org/x/sys/unix"
)

func initTcpLife(stopper <-chan struct{}) {
	log.Println("initTcpLife")
	defer log.Println("initTcpLife exit")
	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %v", err)
	}
	defer objs.Close()

	// The first two arguments are taken from the following pathname:
	// /sys/kernel/tracing/events/sock/inet_sock_set_state
	// sudo ls /sys/kernel/tracing/events/sock/inet_sock_set_state/
	// sudo cat /sys/kernel/tracing/events/sock/inet_sock_set_state/format
	kp, err := link.Tracepoint("sock", "inet_sock_set_state", objs.InetSockSetState, nil)
	if err != nil {
		log.Fatalf("opening tracepoint: %s", err)
	}
	defer kp.Close()

	// Open a ringbuf reader from userspace RINGBUF map described in the
	// eBPF C program.
	rd, err := ringbuf.NewReader(objs.EventsBf)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rd.Close()

	// Close the reader when the process receives a signal, which will exit
	// the read loop.
	go func() {
		<-stopper

		if err := rd.Close(); err != nil {
			log.Fatalf("closing ringbuf reader: %s", err)
		}
	}()

	log.Println("Waiting for events..")

	// bpfEvent is generated by bpf2go.
	var bpfevent bpfEvent
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				log.Println("Received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}

		// Parse the ringbuf event entry into a bpfEvent structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &bpfevent); err != nil {
			log.Printf("parsing ringbuf event: %s", err)
			continue
		}
		// 打印 bpfEvent 结构体的内容
		log.Printf("pid: %d\tcomm: %s\nsaddr: %v\tdaddr: %v\tts_us: %d\tspan_us: %d\trxb: %d\ttxb: %d\tsport: %d\tdport: %d\tfamily: %d\n", bpfevent.Pid, unix.ByteSliceToString(bpfevent.Comm[:]), bpfevent.Saddr, bpfevent.Daddr, bpfevent.TsUs, bpfevent.SpanUs, bpfevent.RxB, bpfevent.TxB, bpfevent.Sport, bpfevent.Dport, bpfevent.Family)
		EventCh <- event.Tcplife_event{
			Saddr:  bpfevent.Saddr,
			Daddr:  bpfevent.Daddr,
			TsUs:   bpfevent.TsUs,
			SpanUs: bpfevent.SpanUs,
			RxB:    bpfevent.RxB,
			TxB:    bpfevent.TxB,
			Pid:    bpfevent.Pid,
			Sport:  bpfevent.Sport,
			Dport:  bpfevent.Dport,
			Family: bpfevent.Family,
			Comm:   unix.ByteSliceToString(bpfevent.Comm[:]),
		}
	}
}
